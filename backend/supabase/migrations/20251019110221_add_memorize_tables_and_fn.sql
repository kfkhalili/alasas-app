-- 1. Create the 'quran_words' table
-- This stores each word from uthmani.json
CREATE TABLE IF NOT EXISTS public.quran_words (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    verse_id BIGINT NOT NULL REFERENCES public.verses(id) ON DELETE CASCADE,
    position INT NOT NULL,
    arabic_text TEXT NOT NULL,
    page_number INT NOT NULL,
    qul_word_id INT NOT NULL UNIQUE, -- The 'id' field from uthmani.json
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL -- Correct type
);

-- Add indexes for performance
CREATE INDEX IF NOT EXISTS idx_quran_words_verse_id ON public.quran_words(verse_id);
CREATE INDEX IF NOT EXISTS idx_quran_words_page_number ON public.quran_words(page_number);

-- 2. Add 'page_number' to the 'verses' table
-- This is non-destructive and will be populated by the seed script
ALTER TABLE public.verses
  ADD COLUMN IF NOT EXISTS page_number INT;

CREATE INDEX IF NOT EXISTS idx_verses_page_number ON public.verses(page_number);

-- 3. Secure the new table with RLS
ALTER TABLE public.quran_words ENABLE ROW LEVEL SECURITY;

-- Create policy only if it doesn't exist
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies
    WHERE policyname = 'Allow authenticated read access to quran_words'
    AND tablename = 'quran_words'
  ) THEN
    CREATE POLICY "Allow authenticated read access to quran_words"
      ON public.quran_words FOR SELECT
      TO authenticated
      USING (true);
  END IF;
END $$;


-- 4. Secure the 'questions' table
ALTER TABLE public.questions ENABLE ROW LEVEL SECURITY;

-- Create policy only if it doesn't exist
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies
    WHERE policyname = 'Allow authenticated read access to questions'
    AND tablename = 'questions'
  ) THEN
    CREATE POLICY "Allow authenticated read access to questions"
      ON public.questions FOR SELECT
      TO authenticated
      USING (true);
  END IF;
END $$;

-- 5. Define the type for the bulk update
-- This matches the objects the seed script will send


DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'verse_page_update') THEN
        CREATE TYPE verse_page_update AS (
          verse_id INT,
           p_num INT
        );
    END IF;
END$$;

-- 6. Create the bulk update function
-- This efficiently updates page numbers in the verses table
CREATE OR REPLACE FUNCTION bulk_update_verse_pages(updates verse_page_update[])
RETURNS void
LANGUAGE plpgsql
AS $function$
BEGIN
  -- Loop through the array and update each row
  FOR i IN 1..array_length(updates, 1) LOOP
    UPDATE public.verses
    SET page_number = updates[i].p_num
    WHERE id = updates[i].verse_id;
  END LOOP;
END;
$function$;